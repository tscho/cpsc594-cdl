#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MetricAnalyzer.Common.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MetricAnalyzer")]
	public partial class MetricAnalyzerEntitiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertComponent(Component instance);
    partial void UpdateComponent(Component instance);
    partial void DeleteComponent(Component instance);
    partial void InsertVelocityTrend(VelocityTrend instance);
    partial void UpdateVelocityTrend(VelocityTrend instance);
    partial void DeleteVelocityTrend(VelocityTrend instance);
    partial void InsertCoverage(Coverage instance);
    partial void UpdateCoverage(Coverage instance);
    partial void DeleteCoverage(Coverage instance);
    partial void InsertDefectInjectionRate(DefectInjectionRate instance);
    partial void UpdateDefectInjectionRate(DefectInjectionRate instance);
    partial void DeleteDefectInjectionRate(DefectInjectionRate instance);
    partial void InsertDefectRepairRate(DefectRepairRate instance);
    partial void UpdateDefectRepairRate(DefectRepairRate instance);
    partial void DeleteDefectRepairRate(DefectRepairRate instance);
    partial void InsertIteration(Iteration instance);
    partial void UpdateIteration(Iteration instance);
    partial void DeleteIteration(Iteration instance);
    partial void InsertOutOfScopeWork(OutOfScopeWork instance);
    partial void UpdateOutOfScopeWork(OutOfScopeWork instance);
    partial void DeleteOutOfScopeWork(OutOfScopeWork instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertResourceUtilization(ResourceUtilization instance);
    partial void UpdateResourceUtilization(ResourceUtilization instance);
    partial void DeleteResourceUtilization(ResourceUtilization instance);
    partial void InsertRework(Rework instance);
    partial void UpdateRework(Rework instance);
    partial void DeleteRework(Rework instance);
    partial void InsertTestEffectiveness(TestEffectiveness instance);
    partial void UpdateTestEffectiveness(TestEffectiveness instance);
    partial void DeleteTestEffectiveness(TestEffectiveness instance);
    #endregion
		
		public MetricAnalyzerEntitiesDataContext() : 
				base(global::MetricAnalyzer.Common.Properties.Settings.Default.MetricAnalyzerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MetricAnalyzerEntitiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetricAnalyzerEntitiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetricAnalyzerEntitiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MetricAnalyzerEntitiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Component> Components
		{
			get
			{
				return this.GetTable<Component>();
			}
		}
		
		public System.Data.Linq.Table<VelocityTrend> VelocityTrends
		{
			get
			{
				return this.GetTable<VelocityTrend>();
			}
		}
		
		public System.Data.Linq.Table<Coverage> Coverages
		{
			get
			{
				return this.GetTable<Coverage>();
			}
		}
		
		public System.Data.Linq.Table<DefectInjectionRate> DefectInjectionRates
		{
			get
			{
				return this.GetTable<DefectInjectionRate>();
			}
		}
		
		public System.Data.Linq.Table<DefectRepairRate> DefectRepairRates
		{
			get
			{
				return this.GetTable<DefectRepairRate>();
			}
		}
		
		public System.Data.Linq.Table<Iteration> Iterations
		{
			get
			{
				return this.GetTable<Iteration>();
			}
		}
		
		public System.Data.Linq.Table<OutOfScopeWork> OutOfScopeWorks
		{
			get
			{
				return this.GetTable<OutOfScopeWork>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ResourceUtilization> ResourceUtilizations
		{
			get
			{
				return this.GetTable<ResourceUtilization>();
			}
		}
		
		public System.Data.Linq.Table<Rework> Reworks
		{
			get
			{
				return this.GetTable<Rework>();
			}
		}
		
		public System.Data.Linq.Table<TestEffectiveness> TestEffectivenesses
		{
			get
			{
				return this.GetTable<TestEffectiveness>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Component")]
	public partial class Component : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComponentID;
		
		private int _ProductID;
		
		private string _ComponentName;
		
		private EntitySet<Coverage> _Coverages;
		
		private EntitySet<DefectInjectionRate> _DefectInjectionRates;
		
		private EntitySet<DefectRepairRate> _DefectRepairRates;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComponentIDChanging(int value);
    partial void OnComponentIDChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnComponentNameChanging(string value);
    partial void OnComponentNameChanged();
    #endregion
		
		public Component()
		{
			this._Coverages = new EntitySet<Coverage>(new Action<Coverage>(this.attach_Coverages), new Action<Coverage>(this.detach_Coverages));
			this._DefectInjectionRates = new EntitySet<DefectInjectionRate>(new Action<DefectInjectionRate>(this.attach_DefectInjectionRates), new Action<DefectInjectionRate>(this.detach_DefectInjectionRates));
			this._DefectRepairRates = new EntitySet<DefectRepairRate>(new Action<DefectRepairRate>(this.attach_DefectRepairRates), new Action<DefectRepairRate>(this.detach_DefectRepairRates));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ComponentID
		{
			get
			{
				return this._ComponentID;
			}
			set
			{
				if ((this._ComponentID != value))
				{
					this.OnComponentIDChanging(value);
					this.SendPropertyChanging();
					this._ComponentID = value;
					this.SendPropertyChanged("ComponentID");
					this.OnComponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ComponentName
		{
			get
			{
				return this._ComponentName;
			}
			set
			{
				if ((this._ComponentName != value))
				{
					this.OnComponentNameChanging(value);
					this.SendPropertyChanging();
					this._ComponentName = value;
					this.SendPropertyChanged("ComponentName");
					this.OnComponentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_Coverage", Storage="_Coverages", ThisKey="ComponentID", OtherKey="ComponentID")]
		public EntitySet<Coverage> Coverages
		{
			get
			{
				return this._Coverages;
			}
			set
			{
				this._Coverages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_DefectInjectionRate", Storage="_DefectInjectionRates", ThisKey="ComponentID", OtherKey="ComponentID")]
		public EntitySet<DefectInjectionRate> DefectInjectionRates
		{
			get
			{
				return this._DefectInjectionRates;
			}
			set
			{
				this._DefectInjectionRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_DefectRepairRate", Storage="_DefectRepairRates", ThisKey="ComponentID", OtherKey="ComponentID")]
		public EntitySet<DefectRepairRate> DefectRepairRates
		{
			get
			{
				return this._DefectRepairRates;
			}
			set
			{
				this._DefectRepairRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Component", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Components.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Components.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Coverages(Coverage entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_Coverages(Coverage entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
		
		private void attach_DefectInjectionRates(DefectInjectionRate entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_DefectInjectionRates(DefectInjectionRate entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
		
		private void attach_DefectRepairRates(DefectRepairRate entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_DefectRepairRates(DefectRepairRate entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VelocityTrend")]
	public partial class VelocityTrend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private int _IterationID;
		
		private double _EstimatedHours;
		
		private double _ActualHours;
		
		private int _VelocityTrendID;
		
		private System.DateTime _Date;
		
		private EntityRef<Iteration> _Iteration;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnEstimatedHoursChanging(double value);
    partial void OnEstimatedHoursChanged();
    partial void OnActualHoursChanging(double value);
    partial void OnActualHoursChanged();
    partial void OnVelocityTrendIDChanging(int value);
    partial void OnVelocityTrendIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public VelocityTrend()
		{
			this._Iteration = default(EntityRef<Iteration>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedHours", DbType="Float NOT NULL")]
		public double EstimatedHours
		{
			get
			{
				return this._EstimatedHours;
			}
			set
			{
				if ((this._EstimatedHours != value))
				{
					this.OnEstimatedHoursChanging(value);
					this.SendPropertyChanging();
					this._EstimatedHours = value;
					this.SendPropertyChanged("EstimatedHours");
					this.OnEstimatedHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualHours", DbType="Float NOT NULL")]
		public double ActualHours
		{
			get
			{
				return this._ActualHours;
			}
			set
			{
				if ((this._ActualHours != value))
				{
					this.OnActualHoursChanging(value);
					this.SendPropertyChanging();
					this._ActualHours = value;
					this.SendPropertyChanged("ActualHours");
					this.OnActualHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VelocityTrendID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VelocityTrendID
		{
			get
			{
				return this._VelocityTrendID;
			}
			set
			{
				if ((this._VelocityTrendID != value))
				{
					this.OnVelocityTrendIDChanging(value);
					this.SendPropertyChanging();
					this._VelocityTrendID = value;
					this.SendPropertyChanged("VelocityTrendID");
					this.OnVelocityTrendIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_VelocityTrend", Storage="_Iteration", ThisKey="IterationID", OtherKey="IterationID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.VelocityTrends.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.VelocityTrends.Add(this);
						this._IterationID = value.IterationID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_VelocityTrend", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.VelocityTrends.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.VelocityTrends.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Coverage")]
	public partial class Coverage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FileName;
		
		private int _ComponentID;
		
		private int _LinesCovered;
		
		private int _LinesExecuted;
		
		private int _CoverageID;
		
		private int _IterationID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<Component> _Component;
		
		private EntityRef<Iteration> _Iteration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnComponentIDChanging(int value);
    partial void OnComponentIDChanged();
    partial void OnLinesCoveredChanging(int value);
    partial void OnLinesCoveredChanged();
    partial void OnLinesExecutedChanging(int value);
    partial void OnLinesExecutedChanged();
    partial void OnCoverageIDChanging(int value);
    partial void OnCoverageIDChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Coverage()
		{
			this._Component = default(EntityRef<Component>);
			this._Iteration = default(EntityRef<Iteration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="VarChar(100)")]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentID", DbType="Int NOT NULL")]
		public int ComponentID
		{
			get
			{
				return this._ComponentID;
			}
			set
			{
				if ((this._ComponentID != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentIDChanging(value);
					this.SendPropertyChanging();
					this._ComponentID = value;
					this.SendPropertyChanged("ComponentID");
					this.OnComponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinesCovered", DbType="Int NOT NULL")]
		public int LinesCovered
		{
			get
			{
				return this._LinesCovered;
			}
			set
			{
				if ((this._LinesCovered != value))
				{
					this.OnLinesCoveredChanging(value);
					this.SendPropertyChanging();
					this._LinesCovered = value;
					this.SendPropertyChanged("LinesCovered");
					this.OnLinesCoveredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinesExecuted", DbType="Int NOT NULL")]
		public int LinesExecuted
		{
			get
			{
				return this._LinesExecuted;
			}
			set
			{
				if ((this._LinesExecuted != value))
				{
					this.OnLinesExecutedChanging(value);
					this.SendPropertyChanging();
					this._LinesExecuted = value;
					this.SendPropertyChanged("LinesExecuted");
					this.OnLinesExecutedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoverageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CoverageID
		{
			get
			{
				return this._CoverageID;
			}
			set
			{
				if ((this._CoverageID != value))
				{
					this.OnCoverageIDChanging(value);
					this.SendPropertyChanging();
					this._CoverageID = value;
					this.SendPropertyChanged("CoverageID");
					this.OnCoverageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_Coverage", Storage="_Component", ThisKey="ComponentID", OtherKey="ComponentID", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.Coverages.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.Coverages.Add(this);
						this._ComponentID = value.ComponentID;
					}
					else
					{
						this._ComponentID = default(int);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_Coverage", Storage="_Iteration", ThisKey="IterationID", OtherKey="IterationID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.Coverages.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.Coverages.Add(this);
						this._IterationID = value.IterationID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DefectInjectionRate")]
	public partial class DefectInjectionRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComponentID;
		
		private int _DefectInjectionRateID;
		
		private int _IterationID;
		
		private int _NumberOfHighDefects;
		
		private int _NumberOfMediumDefects;
		
		private int _NumberOfLowDefects;
		
		private System.DateTime _Date;
		
		private EntityRef<Component> _Component;
		
		private EntityRef<Iteration> _Iteration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComponentIDChanging(int value);
    partial void OnComponentIDChanged();
    partial void OnDefectInjectionRateIDChanging(int value);
    partial void OnDefectInjectionRateIDChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnNumberOfHighDefectsChanging(int value);
    partial void OnNumberOfHighDefectsChanged();
    partial void OnNumberOfMediumDefectsChanging(int value);
    partial void OnNumberOfMediumDefectsChanged();
    partial void OnNumberOfLowDefectsChanging(int value);
    partial void OnNumberOfLowDefectsChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public DefectInjectionRate()
		{
			this._Component = default(EntityRef<Component>);
			this._Iteration = default(EntityRef<Iteration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentID", DbType="Int NOT NULL")]
		public int ComponentID
		{
			get
			{
				return this._ComponentID;
			}
			set
			{
				if ((this._ComponentID != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentIDChanging(value);
					this.SendPropertyChanging();
					this._ComponentID = value;
					this.SendPropertyChanged("ComponentID");
					this.OnComponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectInjectionRateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DefectInjectionRateID
		{
			get
			{
				return this._DefectInjectionRateID;
			}
			set
			{
				if ((this._DefectInjectionRateID != value))
				{
					this.OnDefectInjectionRateIDChanging(value);
					this.SendPropertyChanging();
					this._DefectInjectionRateID = value;
					this.SendPropertyChanged("DefectInjectionRateID");
					this.OnDefectInjectionRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfHighDefects", DbType="Int NOT NULL")]
		public int NumberOfHighDefects
		{
			get
			{
				return this._NumberOfHighDefects;
			}
			set
			{
				if ((this._NumberOfHighDefects != value))
				{
					this.OnNumberOfHighDefectsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfHighDefects = value;
					this.SendPropertyChanged("NumberOfHighDefects");
					this.OnNumberOfHighDefectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfMediumDefects", DbType="Int NOT NULL")]
		public int NumberOfMediumDefects
		{
			get
			{
				return this._NumberOfMediumDefects;
			}
			set
			{
				if ((this._NumberOfMediumDefects != value))
				{
					this.OnNumberOfMediumDefectsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfMediumDefects = value;
					this.SendPropertyChanged("NumberOfMediumDefects");
					this.OnNumberOfMediumDefectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfLowDefects", DbType="Int NOT NULL")]
		public int NumberOfLowDefects
		{
			get
			{
				return this._NumberOfLowDefects;
			}
			set
			{
				if ((this._NumberOfLowDefects != value))
				{
					this.OnNumberOfLowDefectsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfLowDefects = value;
					this.SendPropertyChanged("NumberOfLowDefects");
					this.OnNumberOfLowDefectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_DefectInjectionRate", Storage="_Component", ThisKey="ComponentID", OtherKey="ComponentID", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.DefectInjectionRates.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.DefectInjectionRates.Add(this);
						this._ComponentID = value.ComponentID;
					}
					else
					{
						this._ComponentID = default(int);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_DefectInjectionRate", Storage="_Iteration", ThisKey="IterationID", OtherKey="IterationID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.DefectInjectionRates.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.DefectInjectionRates.Add(this);
						this._IterationID = value.IterationID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DefectRepairRate")]
	public partial class DefectRepairRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DefectRepairRateID;
		
		private int _ComponentID;
		
		private int _IterationID;
		
		private int _NumberOfResolvedDefects;
		
		private int _NumberOfVerifiedDefects;
		
		private System.DateTime _Date;
		
		private EntityRef<Component> _Component;
		
		private EntityRef<Iteration> _Iteration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDefectRepairRateIDChanging(int value);
    partial void OnDefectRepairRateIDChanged();
    partial void OnComponentIDChanging(int value);
    partial void OnComponentIDChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnNumberOfResolvedDefectsChanging(int value);
    partial void OnNumberOfResolvedDefectsChanged();
    partial void OnNumberOfVerifiedDefectsChanging(int value);
    partial void OnNumberOfVerifiedDefectsChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public DefectRepairRate()
		{
			this._Component = default(EntityRef<Component>);
			this._Iteration = default(EntityRef<Iteration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefectRepairRateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DefectRepairRateID
		{
			get
			{
				return this._DefectRepairRateID;
			}
			set
			{
				if ((this._DefectRepairRateID != value))
				{
					this.OnDefectRepairRateIDChanging(value);
					this.SendPropertyChanging();
					this._DefectRepairRateID = value;
					this.SendPropertyChanged("DefectRepairRateID");
					this.OnDefectRepairRateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComponentID", DbType="Int NOT NULL")]
		public int ComponentID
		{
			get
			{
				return this._ComponentID;
			}
			set
			{
				if ((this._ComponentID != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComponentIDChanging(value);
					this.SendPropertyChanging();
					this._ComponentID = value;
					this.SendPropertyChanged("ComponentID");
					this.OnComponentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfResolvedDefects", DbType="Int NOT NULL")]
		public int NumberOfResolvedDefects
		{
			get
			{
				return this._NumberOfResolvedDefects;
			}
			set
			{
				if ((this._NumberOfResolvedDefects != value))
				{
					this.OnNumberOfResolvedDefectsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfResolvedDefects = value;
					this.SendPropertyChanged("NumberOfResolvedDefects");
					this.OnNumberOfResolvedDefectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfVerifiedDefects", DbType="Int NOT NULL")]
		public int NumberOfVerifiedDefects
		{
			get
			{
				return this._NumberOfVerifiedDefects;
			}
			set
			{
				if ((this._NumberOfVerifiedDefects != value))
				{
					this.OnNumberOfVerifiedDefectsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfVerifiedDefects = value;
					this.SendPropertyChanged("NumberOfVerifiedDefects");
					this.OnNumberOfVerifiedDefectsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_DefectRepairRate", Storage="_Component", ThisKey="ComponentID", OtherKey="ComponentID", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.DefectRepairRates.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.DefectRepairRates.Add(this);
						this._ComponentID = value.ComponentID;
					}
					else
					{
						this._ComponentID = default(int);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_DefectRepairRate", Storage="_Iteration", ThisKey="IterationID", OtherKey="IterationID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.DefectRepairRates.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.DefectRepairRates.Add(this);
						this._IterationID = value.IterationID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Iteration")]
	public partial class Iteration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IterationID;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _IterationLabel;
		
		private EntitySet<VelocityTrend> _VelocityTrends;
		
		private EntitySet<Coverage> _Coverages;
		
		private EntitySet<DefectInjectionRate> _DefectInjectionRates;
		
		private EntitySet<DefectRepairRate> _DefectRepairRates;
		
		private EntitySet<OutOfScopeWork> _OutOfScopeWorks;
		
		private EntitySet<ResourceUtilization> _ResourceUtilizations;
		
		private EntitySet<Rework> _Reworks;
		
		private EntitySet<TestEffectiveness> _TestEffectivenesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnIterationLabelChanging(string value);
    partial void OnIterationLabelChanged();
    #endregion
		
		public Iteration()
		{
			this._VelocityTrends = new EntitySet<VelocityTrend>(new Action<VelocityTrend>(this.attach_VelocityTrends), new Action<VelocityTrend>(this.detach_VelocityTrends));
			this._Coverages = new EntitySet<Coverage>(new Action<Coverage>(this.attach_Coverages), new Action<Coverage>(this.detach_Coverages));
			this._DefectInjectionRates = new EntitySet<DefectInjectionRate>(new Action<DefectInjectionRate>(this.attach_DefectInjectionRates), new Action<DefectInjectionRate>(this.detach_DefectInjectionRates));
			this._DefectRepairRates = new EntitySet<DefectRepairRate>(new Action<DefectRepairRate>(this.attach_DefectRepairRates), new Action<DefectRepairRate>(this.detach_DefectRepairRates));
			this._OutOfScopeWorks = new EntitySet<OutOfScopeWork>(new Action<OutOfScopeWork>(this.attach_OutOfScopeWorks), new Action<OutOfScopeWork>(this.detach_OutOfScopeWorks));
			this._ResourceUtilizations = new EntitySet<ResourceUtilization>(new Action<ResourceUtilization>(this.attach_ResourceUtilizations), new Action<ResourceUtilization>(this.detach_ResourceUtilizations));
			this._Reworks = new EntitySet<Rework>(new Action<Rework>(this.attach_Reworks), new Action<Rework>(this.detach_Reworks));
			this._TestEffectivenesses = new EntitySet<TestEffectiveness>(new Action<TestEffectiveness>(this.attach_TestEffectivenesses), new Action<TestEffectiveness>(this.detach_TestEffectivenesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationLabel", DbType="NChar(4) NOT NULL", CanBeNull=false)]
		public string IterationLabel
		{
			get
			{
				return this._IterationLabel;
			}
			set
			{
				if ((this._IterationLabel != value))
				{
					this.OnIterationLabelChanging(value);
					this.SendPropertyChanging();
					this._IterationLabel = value;
					this.SendPropertyChanged("IterationLabel");
					this.OnIterationLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_VelocityTrend", Storage="_VelocityTrends", ThisKey="IterationID", OtherKey="IterationID")]
		public EntitySet<VelocityTrend> VelocityTrends
		{
			get
			{
				return this._VelocityTrends;
			}
			set
			{
				this._VelocityTrends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_Coverage", Storage="_Coverages", ThisKey="IterationID", OtherKey="IterationID")]
		public EntitySet<Coverage> Coverages
		{
			get
			{
				return this._Coverages;
			}
			set
			{
				this._Coverages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_DefectInjectionRate", Storage="_DefectInjectionRates", ThisKey="IterationID", OtherKey="IterationID")]
		public EntitySet<DefectInjectionRate> DefectInjectionRates
		{
			get
			{
				return this._DefectInjectionRates;
			}
			set
			{
				this._DefectInjectionRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_DefectRepairRate", Storage="_DefectRepairRates", ThisKey="IterationID", OtherKey="IterationID")]
		public EntitySet<DefectRepairRate> DefectRepairRates
		{
			get
			{
				return this._DefectRepairRates;
			}
			set
			{
				this._DefectRepairRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_OutOfScopeWork", Storage="_OutOfScopeWorks", ThisKey="IterationID", OtherKey="IterationID")]
		public EntitySet<OutOfScopeWork> OutOfScopeWorks
		{
			get
			{
				return this._OutOfScopeWorks;
			}
			set
			{
				this._OutOfScopeWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_ResourceUtilization", Storage="_ResourceUtilizations", ThisKey="IterationID", OtherKey="IterationID")]
		public EntitySet<ResourceUtilization> ResourceUtilizations
		{
			get
			{
				return this._ResourceUtilizations;
			}
			set
			{
				this._ResourceUtilizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_Rework", Storage="_Reworks", ThisKey="IterationID", OtherKey="IterationID")]
		public EntitySet<Rework> Reworks
		{
			get
			{
				return this._Reworks;
			}
			set
			{
				this._Reworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_TestEffectiveness", Storage="_TestEffectivenesses", ThisKey="IterationID", OtherKey="IterationID")]
		public EntitySet<TestEffectiveness> TestEffectivenesses
		{
			get
			{
				return this._TestEffectivenesses;
			}
			set
			{
				this._TestEffectivenesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VelocityTrends(VelocityTrend entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_VelocityTrends(VelocityTrend entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
		
		private void attach_Coverages(Coverage entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_Coverages(Coverage entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
		
		private void attach_DefectInjectionRates(DefectInjectionRate entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_DefectInjectionRates(DefectInjectionRate entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
		
		private void attach_DefectRepairRates(DefectRepairRate entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_DefectRepairRates(DefectRepairRate entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
		
		private void attach_OutOfScopeWorks(OutOfScopeWork entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_OutOfScopeWorks(OutOfScopeWork entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
		
		private void attach_ResourceUtilizations(ResourceUtilization entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_ResourceUtilizations(ResourceUtilization entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
		
		private void attach_Reworks(Rework entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_Reworks(Rework entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
		
		private void attach_TestEffectivenesses(TestEffectiveness entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = this;
		}
		
		private void detach_TestEffectivenesses(TestEffectiveness entity)
		{
			this.SendPropertyChanging();
			entity.Iteration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutOfScopeWork")]
	public partial class OutOfScopeWork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private int _OutOfScopeWorkID;
		
		private double _PersonHours;
		
		private int _IterationID;
		
		private System.DateTime _Date;
		
		private EntityRef<Iteration> _Iteration;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnOutOfScopeWorkIDChanging(int value);
    partial void OnOutOfScopeWorkIDChanged();
    partial void OnPersonHoursChanging(double value);
    partial void OnPersonHoursChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public OutOfScopeWork()
		{
			this._Iteration = default(EntityRef<Iteration>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutOfScopeWorkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OutOfScopeWorkID
		{
			get
			{
				return this._OutOfScopeWorkID;
			}
			set
			{
				if ((this._OutOfScopeWorkID != value))
				{
					this.OnOutOfScopeWorkIDChanging(value);
					this.SendPropertyChanging();
					this._OutOfScopeWorkID = value;
					this.SendPropertyChanged("OutOfScopeWorkID");
					this.OnOutOfScopeWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonHours", DbType="Float NOT NULL")]
		public double PersonHours
		{
			get
			{
				return this._PersonHours;
			}
			set
			{
				if ((this._PersonHours != value))
				{
					this.OnPersonHoursChanging(value);
					this.SendPropertyChanging();
					this._PersonHours = value;
					this.SendPropertyChanged("PersonHours");
					this.OnPersonHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_OutOfScopeWork", Storage="_Iteration", ThisKey="IterationID", OtherKey="IterationID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.OutOfScopeWorks.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.OutOfScopeWorks.Add(this);
						this._IterationID = value.IterationID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OutOfScopeWork", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OutOfScopeWorks.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OutOfScopeWorks.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProductName;
		
		private int _ProductID;
		
		private EntitySet<Component> _Components;
		
		private EntitySet<VelocityTrend> _VelocityTrends;
		
		private EntitySet<OutOfScopeWork> _OutOfScopeWorks;
		
		private EntitySet<ResourceUtilization> _ResourceUtilizations;
		
		private EntitySet<Rework> _Reworks;
		
		private EntitySet<TestEffectiveness> _TestEffectivenesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    #endregion
		
		public Product()
		{
			this._Components = new EntitySet<Component>(new Action<Component>(this.attach_Components), new Action<Component>(this.detach_Components));
			this._VelocityTrends = new EntitySet<VelocityTrend>(new Action<VelocityTrend>(this.attach_VelocityTrends), new Action<VelocityTrend>(this.detach_VelocityTrends));
			this._OutOfScopeWorks = new EntitySet<OutOfScopeWork>(new Action<OutOfScopeWork>(this.attach_OutOfScopeWorks), new Action<OutOfScopeWork>(this.detach_OutOfScopeWorks));
			this._ResourceUtilizations = new EntitySet<ResourceUtilization>(new Action<ResourceUtilization>(this.attach_ResourceUtilizations), new Action<ResourceUtilization>(this.detach_ResourceUtilizations));
			this._Reworks = new EntitySet<Rework>(new Action<Rework>(this.attach_Reworks), new Action<Rework>(this.detach_Reworks));
			this._TestEffectivenesses = new EntitySet<TestEffectiveness>(new Action<TestEffectiveness>(this.attach_TestEffectivenesses), new Action<TestEffectiveness>(this.detach_TestEffectivenesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Component", Storage="_Components", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Component> Components
		{
			get
			{
				return this._Components;
			}
			set
			{
				this._Components.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_VelocityTrend", Storage="_VelocityTrends", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<VelocityTrend> VelocityTrends
		{
			get
			{
				return this._VelocityTrends;
			}
			set
			{
				this._VelocityTrends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OutOfScopeWork", Storage="_OutOfScopeWorks", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<OutOfScopeWork> OutOfScopeWorks
		{
			get
			{
				return this._OutOfScopeWorks;
			}
			set
			{
				this._OutOfScopeWorks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ResourceUtilization", Storage="_ResourceUtilizations", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<ResourceUtilization> ResourceUtilizations
		{
			get
			{
				return this._ResourceUtilizations;
			}
			set
			{
				this._ResourceUtilizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Rework", Storage="_Reworks", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<Rework> Reworks
		{
			get
			{
				return this._Reworks;
			}
			set
			{
				this._Reworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_TestEffectiveness", Storage="_TestEffectivenesses", ThisKey="ProductID", OtherKey="ProductID")]
		public EntitySet<TestEffectiveness> TestEffectivenesses
		{
			get
			{
				return this._TestEffectivenesses;
			}
			set
			{
				this._TestEffectivenesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Components(Component entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Components(Component entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_VelocityTrends(VelocityTrend entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_VelocityTrends(VelocityTrend entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OutOfScopeWorks(OutOfScopeWork entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OutOfScopeWorks(OutOfScopeWork entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ResourceUtilizations(ResourceUtilization entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ResourceUtilizations(ResourceUtilization entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Reworks(Rework entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Reworks(Rework entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_TestEffectivenesses(TestEffectiveness entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_TestEffectivenesses(TestEffectiveness entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceUtilization")]
	public partial class ResourceUtilization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductID;
		
		private int _ResourceUtilizationID;
		
		private double _PersonHours;
		
		private int _IterationID;
		
		private System.DateTime _Date;
		
		private int _WorkActionID;
		
		private EntityRef<Iteration> _Iteration;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnResourceUtilizationIDChanging(int value);
    partial void OnResourceUtilizationIDChanged();
    partial void OnPersonHoursChanging(double value);
    partial void OnPersonHoursChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnWorkActionIDChanging(int value);
    partial void OnWorkActionIDChanged();
    #endregion
		
		public ResourceUtilization()
		{
			this._Iteration = default(EntityRef<Iteration>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceUtilizationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResourceUtilizationID
		{
			get
			{
				return this._ResourceUtilizationID;
			}
			set
			{
				if ((this._ResourceUtilizationID != value))
				{
					this.OnResourceUtilizationIDChanging(value);
					this.SendPropertyChanging();
					this._ResourceUtilizationID = value;
					this.SendPropertyChanged("ResourceUtilizationID");
					this.OnResourceUtilizationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonHours", DbType="Float NOT NULL")]
		public double PersonHours
		{
			get
			{
				return this._PersonHours;
			}
			set
			{
				if ((this._PersonHours != value))
				{
					this.OnPersonHoursChanging(value);
					this.SendPropertyChanging();
					this._PersonHours = value;
					this.SendPropertyChanged("PersonHours");
					this.OnPersonHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkActionID", DbType="Int NOT NULL")]
		public int WorkActionID
		{
			get
			{
				return this._WorkActionID;
			}
			set
			{
				if ((this._WorkActionID != value))
				{
					this.OnWorkActionIDChanging(value);
					this.SendPropertyChanging();
					this._WorkActionID = value;
					this.SendPropertyChanged("WorkActionID");
					this.OnWorkActionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_ResourceUtilization", Storage="_Iteration", ThisKey="IterationID", OtherKey="IterationID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.ResourceUtilizations.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.ResourceUtilizations.Add(this);
						this._IterationID = value.IterationID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ResourceUtilization", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ResourceUtilizations.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ResourceUtilizations.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rework")]
	public partial class Rework : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReworkID;
		
		private double _ReworkHours;
		
		private int _ProductID;
		
		private int _IterationID;
		
		private System.DateTime _Date;
		
		private EntityRef<Iteration> _Iteration;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReworkIDChanging(int value);
    partial void OnReworkIDChanged();
    partial void OnReworkHoursChanging(double value);
    partial void OnReworkHoursChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Rework()
		{
			this._Iteration = default(EntityRef<Iteration>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReworkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReworkID
		{
			get
			{
				return this._ReworkID;
			}
			set
			{
				if ((this._ReworkID != value))
				{
					this.OnReworkIDChanging(value);
					this.SendPropertyChanging();
					this._ReworkID = value;
					this.SendPropertyChanged("ReworkID");
					this.OnReworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReworkHours", DbType="Float NOT NULL")]
		public double ReworkHours
		{
			get
			{
				return this._ReworkHours;
			}
			set
			{
				if ((this._ReworkHours != value))
				{
					this.OnReworkHoursChanging(value);
					this.SendPropertyChanging();
					this._ReworkHours = value;
					this.SendPropertyChanged("ReworkHours");
					this.OnReworkHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_Rework", Storage="_Iteration", ThisKey="IterationID", OtherKey="IterationID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.Reworks.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.Reworks.Add(this);
						this._IterationID = value.IterationID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Rework", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Reworks.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Reworks.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestEffectiveness")]
	public partial class TestEffectiveness : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestEffectivenessID;
		
		private int _IterationID;
		
		private int _TestCases;
		
		private System.DateTime _Date;
		
		private int _ProductID;
		
		private EntityRef<Iteration> _Iteration;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestEffectivenessIDChanging(int value);
    partial void OnTestEffectivenessIDChanged();
    partial void OnIterationIDChanging(int value);
    partial void OnIterationIDChanged();
    partial void OnTestCasesChanging(int value);
    partial void OnTestCasesChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    #endregion
		
		public TestEffectiveness()
		{
			this._Iteration = default(EntityRef<Iteration>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestEffectivenessID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestEffectivenessID
		{
			get
			{
				return this._TestEffectivenessID;
			}
			set
			{
				if ((this._TestEffectivenessID != value))
				{
					this.OnTestEffectivenessIDChanging(value);
					this.SendPropertyChanging();
					this._TestEffectivenessID = value;
					this.SendPropertyChanged("TestEffectivenessID");
					this.OnTestEffectivenessIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IterationID", DbType="Int NOT NULL")]
		public int IterationID
		{
			get
			{
				return this._IterationID;
			}
			set
			{
				if ((this._IterationID != value))
				{
					if (this._Iteration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIterationIDChanging(value);
					this.SendPropertyChanging();
					this._IterationID = value;
					this.SendPropertyChanged("IterationID");
					this.OnIterationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestCases", DbType="Int NOT NULL")]
		public int TestCases
		{
			get
			{
				return this._TestCases;
			}
			set
			{
				if ((this._TestCases != value))
				{
					this.OnTestCasesChanging(value);
					this.SendPropertyChanging();
					this._TestCases = value;
					this.SendPropertyChanged("TestCases");
					this.OnTestCasesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Iteration_TestEffectiveness", Storage="_Iteration", ThisKey="IterationID", OtherKey="IterationID", IsForeignKey=true)]
		public Iteration Iteration
		{
			get
			{
				return this._Iteration.Entity;
			}
			set
			{
				Iteration previousValue = this._Iteration.Entity;
				if (((previousValue != value) 
							|| (this._Iteration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Iteration.Entity = null;
						previousValue.TestEffectivenesses.Remove(this);
					}
					this._Iteration.Entity = value;
					if ((value != null))
					{
						value.TestEffectivenesses.Add(this);
						this._IterationID = value.IterationID;
					}
					else
					{
						this._IterationID = default(int);
					}
					this.SendPropertyChanged("Iteration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_TestEffectiveness", Storage="_Product", ThisKey="ProductID", OtherKey="ProductID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.TestEffectivenesses.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.TestEffectivenesses.Add(this);
						this._ProductID = value.ProductID;
					}
					else
					{
						this._ProductID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
